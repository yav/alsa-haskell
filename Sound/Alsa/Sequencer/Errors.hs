{-# LANGUAGE ForeignFunctionInterface #-}
-----------------------------------------------------------------
-- |
-- Module    : Sound.Alsa.Sequencer.Types
-- Copyright : (c) Iavor S. Diatchki, 2007
-- License   : BSD3
--
-- Maintainer: Iavor S. Diatchki
-- Stability : provisional
--
-- PRIVATE MODULE.
--
-- Here we have the various types used by the library,
-- and how they are imported\/exported to C.
--
-- NOTE: In the translations bellow we make the following assumptions
-- about the sizes of C types.
-- CChar  = 8 bits
-- CShort = 16 bit
-- CInt   = 32 bits

module Sound.Alsa.Sequencer.Errors where

import Foreign.C.Types(CInt)
import Foreign.C.String(CString,peekCString)
import Control.Exception(throwDyn,catchDyn)
import Data.Word
import Sound.Alsa.Sequencer.Types


-- | Returns the message for an error code.
strerror :: CInt -> IO String
strerror x = peekCString =<< snd_strerror x

foreign import ccall "alsa/asoundlib.h snd_strerror"
  snd_strerror :: CInt -> IO CString

-- | Catch an exception generated by the binding.
alsa_catch :: IO a -> (AlsaException -> IO a) -> IO a
alsa_catch = catchDyn

check_error :: CInt -> IO Word
check_error x
  | x >= 0    = return (fromIntegral x)
  | otherwise = do msg <- strerror x
                   throwDyn AlsaException
                     { exception_code        = fromIntegral (negate x)
                     , exception_description = msg
                     }

check_error_ :: CInt -> IO ()
check_error_ x = check_error x >> return ()

